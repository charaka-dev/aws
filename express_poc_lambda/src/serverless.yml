service: awd-web-hook-service

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  logs:
    apiGateway: true
  tracing:
    apiGateway: true
    lambda: true

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: awd_authoriser
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        ProviderARNs:
          - !GetAtt UserPool.Arn
    AwdResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        UserPoolId: !Ref UserPool
        Identifier: "awd.datacom.com"
        Name: "AWD API"
        Scopes: 
          - ScopeName: "write"
            ScopeDescription: "Write access"
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-${self:provider.stage}-domain
        UserPoolId: !Ref UserPool

    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      DependsOn: AwdResourceServer
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref UserPool
        GenerateSecret: true
        ExplicitAuthFlows:
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        AllowedOAuthFlows:
          - client_credentials
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - "awd.datacom.com/write"
        CallbackURLs:
          - http://localhost:3000/callback
        LogoutURLs:
          - http://localhost:3000/logout
        SupportedIdentityProviders:
          - COGNITO

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
  Outputs:
    UserPoolId:
      Value: !Ref UserPool
    UserPoolClientId:
      Value: !Ref UserPoolClient
    CognitoDomain:
      Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
    TokenUrl:
      Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/oauth2/token

functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
            scopes:
              - "awd.datacom.com/write"
    environment:
      USER_POOL_ID: !Ref UserPool
      CLIENT_ID: !Ref UserPoolClient

  # createUser:
  #   handler: handler.createUser
  #   events:
  #     - http:
  #         path: users
  #         method: post
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId: !Ref ApiGatewayAuthorizer
  #   environment:
  #     USER_POOL_ID: !Ref UserPool
  #     CLIENT_ID: !Ref UserPoolClient

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000